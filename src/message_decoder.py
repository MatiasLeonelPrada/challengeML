"""This module has the MessageDecoder class in charge of decoding messages received from ship."""


class NotEnoughMessages(Exception):
    pass


class MessageDecoder:
    """Decoder of ship messages.

    This class decodes the message received from the cargo ship
    using the message received in the three satellites.
    """
    def __init__(self):
        pass

    def get_last_element(self, lst):
        """Get last element of a list.

        Args:
            lst(list): list obj to process.

        Returns:
            empty string if list is empty or the last obj of the list
        """
        if len(lst) == 0:
            return ''
        return lst[-1]

    def merge_message(self, result, received_msg):
        """Update result if received_msg first msg is different.
        Also, pops the first element of received_msg if not empty.

        Args:
            result(list): list with message to be merged.
            received_msg(list): list with message to analyze.
        """
        if len(received_msg) > 0:
            if len(received_msg[0]) > 0:
                if self.get_last_element(result) != received_msg[0]:
                    result.append(received_msg[0])
            received_msg.pop(0)

    def correct_offset(self, mes_1, mes_2):
        """Fix offset errors between messages.

        Args:
            mes_1(list): list with message to be fixed.
            mes_2(list): list with message to be fixed.
        """
        if len(mes_1) != len(mes_2):
            if len(mes_1[0]) == 0:
                mes_1.pop(0)
            elif len(mes_2[0]) == 0:
                mes_2.pop(0)

    def get_messages(self, messages):
        """Decodes and get the message of the ship.

        Args:
            messages(list): list with lists of strings(messages).

        Raises:
            NotEnoughMessages: if the number of messages is
            different from 3.

        Returns:
            ship_message(str): the message generated by the sender
            of the message.
        """
        if len(messages) != 3:
            raise NotEnoughMessages
        result = list()
        separator = ' '
        mes_1 = messages[0]
        mes_2 = messages[1]
        mes_3 = messages[2]
        self.correct_offset(mes_1, mes_2)
        self.correct_offset(mes_1, mes_3)
        while len(mes_1) > 0:
            self.merge_message(result, mes_1)
            self.merge_message(result, mes_2)
            self.merge_message(result, mes_3)
        ship_message = separator.join(result)
        return ship_message
